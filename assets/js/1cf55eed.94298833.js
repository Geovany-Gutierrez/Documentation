"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[369],{2011:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var o=n(4848),s=n(8453);const a={sidebar_position:2},r="Princ\xedpios SOLID:",d={id:"fundamentos/tutorial-basics/solid",title:"Princ\xedpios SOLID:",description:"Os princ\xedpios SOLID s\xe3o um conjunto de cinco princ\xedpios de design de software que ajudam a criar sistemas mais compreens\xedveis, flex\xedveis e sustent\xe1veis.",source:"@site/docs/fundamentos/tutorial-basics/solid.md",sourceDirName:"fundamentos/tutorial-basics",slug:"/fundamentos/tutorial-basics/solid",permalink:"/my-website/docs/fundamentos/tutorial-basics/solid",draft:!1,unlisted:!1,editUrl:"https://github.com/Geovany-Gutierrez/Documentation/edit/main/my-website/docs/fundamentos/tutorial-basics/solid.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Princ\xedpios de Programa\xe7\xe3o Orientada a Objetos (POO):",permalink:"/my-website/docs/fundamentos/tutorial-basics/poo"},next:{title:"Conceitos importantes em Mobile",permalink:"/my-website/docs/category/conceitos-importantes-em-mobile"}},c={},l=[{value:"Single Responsibility Principle (Princ\xedpio da Responsabilidade \xdanica):",id:"single-responsibility-principle-princ\xedpio-da-responsabilidade-\xfanica",level:2},{value:"Exemplo do SRP em C#:",id:"exemplo-do-srp-em-c",level:3},{value:"Open/Closed Principle (Princ\xedpio Aberto/Fechado):",id:"openclosed-principle-princ\xedpio-abertofechado",level:2},{value:"Exemplo do OCP em C#:",id:"exemplo-do-ocp-em-c",level:3},{value:"Liskov Substitution Principle (Princ\xedpio da Substitui\xe7\xe3o de Liskov):",id:"liskov-substitution-principle-princ\xedpio-da-substitui\xe7\xe3o-de-liskov",level:2},{value:"Exemplo do LSP em C#:",id:"exemplo-do-lsp-em-c",level:3},{value:"Interface Segregation Principle (Princ\xedpio da Segrega\xe7\xe3o de Interface):",id:"interface-segregation-principle-princ\xedpio-da-segrega\xe7\xe3o-de-interface",level:2},{value:"Exemplo do ISP em C#:",id:"exemplo-do-isp-em-c",level:3},{value:"Dependency Inversion Principle (Princ\xedpio da Invers\xe3o de Depend\xeancia):",id:"dependency-inversion-principle-princ\xedpio-da-invers\xe3o-de-depend\xeancia",level:2},{value:"Exemplo do DIP em C#:",id:"exemplo-do-dip-em-c",level:3}];function t(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"princ\xedpios-solid",children:"Princ\xedpios SOLID:"}),"\n",(0,o.jsx)(i.p,{children:"Os princ\xedpios SOLID s\xe3o um conjunto de cinco princ\xedpios de design de software que ajudam a criar sistemas mais compreens\xedveis, flex\xedveis e sustent\xe1veis."}),"\n",(0,o.jsx)(i.h2,{id:"single-responsibility-principle-princ\xedpio-da-responsabilidade-\xfanica",children:"Single Responsibility Principle (Princ\xedpio da Responsabilidade \xdanica):"}),"\n",(0,o.jsx)(i.p,{children:"Uma classe deve ter apenas uma raz\xe3o para mudar, significando que deve ter apenas uma tarefa ou responsabilidade."}),"\n",(0,o.jsx)(i.h3,{id:"exemplo-do-srp-em-c",children:"Exemplo do SRP em C#:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public class Relatorio {\n    public void GerarRelatorio() {\n        // Gera o relat\xf3rio\n    }\n}\n\npublic class Impressora {\n    public void ImprimirRelatorio(Relatorio relatorio) {\n        // Imprime o relat\xf3rio\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h2,{id:"openclosed-principle-princ\xedpio-abertofechado",children:"Open/Closed Principle (Princ\xedpio Aberto/Fechado):"}),"\n",(0,o.jsx)(i.p,{children:"Entidades de software (classes, m\xf3dulos, fun\xe7\xf5es, etc.) devem estar abertas para extens\xe3o, mas fechadas para modifica\xe7\xe3o."}),"\n",(0,o.jsx)(i.h3,{id:"exemplo-do-ocp-em-c",children:"Exemplo do OCP em C#:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public abstract class Forma {\n    public abstract double Area();\n}\n\npublic class Retangulo : Forma {\n    public double Largura { get; set; }\n    public double Altura { get; set; }\n\n    public override double Area() {\n        return Largura * Altura;\n    }\n}\n\npublic class Circulo : Forma {\n    public double Raio { get; set; }\n\n    public override double Area() {\n        return Math.PI * Raio * Raio;\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h2,{id:"liskov-substitution-principle-princ\xedpio-da-substitui\xe7\xe3o-de-liskov",children:"Liskov Substitution Principle (Princ\xedpio da Substitui\xe7\xe3o de Liskov):"}),"\n",(0,o.jsx)(i.p,{children:"Objetos de uma classe base devem ser substitu\xedveis por objetos de subclasses sem afetar a integridade do programa."}),"\n",(0,o.jsx)(i.h3,{id:"exemplo-do-lsp-em-c",children:"Exemplo do LSP em C#:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:'public class Ave {\n    public virtual void Voar() {\n        // Implementa\xe7\xe3o do voo\n    }\n}\n\npublic class Pinguim : Ave {\n    public override void Voar() {\n        throw new InvalidOperationException("Pinguins n\xe3o voam");\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"interface-segregation-principle-princ\xedpio-da-segrega\xe7\xe3o-de-interface",children:"Interface Segregation Principle (Princ\xedpio da Segrega\xe7\xe3o de Interface):"}),"\n",(0,o.jsx)(i.p,{children:"Uma classe n\xe3o deve ser for\xe7ada a implementar interfaces que n\xe3o utiliza."}),"\n",(0,o.jsx)(i.h3,{id:"exemplo-do-isp-em-c",children:"Exemplo do ISP em C#:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public interface IAve {\n    void Comer();\n}\n\npublic interface IAveVoadora {\n    void Voar();\n}\n\npublic class Coruja : IAve, IAveVoadora {\n    public void Comer() {\n        // Comer\n    }\n\n    public void Voar() {\n        // Voar\n    }\n}\n\npublic class Avestruz : IAve {\n    public void Comer() {\n        // Comer\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h2,{id:"dependency-inversion-principle-princ\xedpio-da-invers\xe3o-de-depend\xeancia",children:"Dependency Inversion Principle (Princ\xedpio da Invers\xe3o de Depend\xeancia):"}),"\n",(0,o.jsx)(i.p,{children:"M\xf3dulos de alto n\xedvel n\xe3o devem depender de m\xf3dulos de baixo n\xedvel. Ambos devem depender de abstra\xe7\xf5es."}),"\n",(0,o.jsx)(i.h3,{id:"exemplo-do-dip-em-c",children:"Exemplo do DIP em C#:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public interface IDispositivoDeArmazenamento {\n    void SalvarDados(object dados);\n}\n\npublic class DiscoRigido : IDispositivoDeArmazenamento {\n    public void SalvarDados(object dados) {\n        // Salva dados no disco r\xedgido\n    }\n}\n\npublic class Cliente {\n    private IDispositivoDeArmazenamento dispositivoDeArmazenamento;\n\n    public Cliente(IDispositivoDeArmazenamento dispositivo) {\n        dispositivoDeArmazenamento = dispositivo;\n    }\n\n    public void SalvarDados(object dados) {\n        dispositivoDeArmazenamento.SalvarDados(dados);\n    }\n}\n"})})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>d});var o=n(6540);const s={},a=o.createContext(s);function r(e){const i=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:i},e.children)}}}]);